---
layout: post
title:  "LAMP环境搭建"
date:   2014-02-12 08:33:29 +0800
categories: jekyll update
---



打开此文档阅读时把记事本的自动换行去掉，否则一条命令换行变成了两条

记事本的最上边有一个格式，把下面的自动换行前面的对号去掉即可   切记切结！！！！！！！！！！！！！！！！！！！！

############################################################安装前的准备工作###################################################################
1、首先进行RPM命令安装GCC编译器：

mkdir /media/cdrom   //创建目录

mount /dev/cdrom /media/cdrom   //挂载光驱，如果挂在不上可以手动进行挂载，在linux运行界面的右下角第二个图片进行手动挂载

cd /media/cdrom/CentOS   //切换目录

//安装gcc包所需很多依赖包，依次进行安装

rpm -ivh cpp....按table键出现版本号

rpm -ivh kernel-head....按table键出现版本号

rpm -ivh glibc-head....按table键出现版本号

rpm -ivh glibc-devel....按table键出现版本号

rpm -ivh libgomp-....按table键出现版本号

rpm -ivh gcc-4....按table键出现版本号

which gcc   //测试是否安装完成


2、更改linux的系统时间

date -s


3、FTP服务器基本配置

mount /dev/cdrom /media/cdrom   //挂载光驱，如果挂在不上可以手动进行挂载，在linux运行界面的右下角第二个图片进行手动挂载

cd /media/cdrom/CentOS   //切换目录

rpm  -ivh  vsftpd按table键出现版本号

service  vsftpd  start

chkconfig  --level  35  vsftpd  on

vi /etc/vsftpd/vsftpd.conf   //打开文件进行配置

修改：anonymous_enable=NO   	是否允许匿名访问

修改：local_enable=YES 		是否允许本地用户登录 

修改：write_enable=YES 		是否允许通常的写操作

把：anon_upload_enable=NO   #号去掉修改为NO    //是否允许匿名上传文件

把：anon_mkdir_write_enable=NO  #号去掉修改为NO //是否允许匿名创建目录


在windows下安装ftp工具，连接linux



3、制作yum源

//首先在/media目录下创建一个目录cdrom并将将光盘挂载到系统/media/cdrom下 

mkdir /media/cdrom   //可能会报错，因为你在安装rpm包的时候已经创建过该目录，不用理会继续下一步

mount /dev/cdrom /media/cdrom/   //挂载光驱

//进入到/etc/yum.repos.d目录CentOS-Base.repo重命名。

cd /etc/yum.repos.d

mv CentOS-Base.repo CentOS-Base.repo.bak

vi CentOS-Media.repo

修改为

gpgcheck=0

enabled=1

//将所有的CentOS安装包链接到/media/CentOS

ln -s /media/cdrom/CentOS/ /media/CentOS

//更新依赖包(更新前先按照1.本地源制作.txt配置)   注意不要换行!!!!!!!
yum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers patch



##########################################################安装前准备工作到此完成，开始安装php扩展库####################################################################################

安装libxml2最新库文件


cd /usr/local/src  //进入软件源码包所在目录 

tar zxvf libxml按table键出现版本号 //解包解压

cd libxml按table键出现版本号  //进入解包解压后的目录

./configure --prefix=/usr/local/libxml2 //选项--prefix=/usr/local/libxml2作用，是在安装时将软件安装到/usr/local/libxml2目录下。

make  //对软件源代码文件进行编译

make install  //开始安装libxml2库文件

cd /usr/local/libxml2/    /如果安装成功目录下将生成bin,include,lib,share四个目录。


 

安装libmcrypt最新库文件

cd /usr/local/src

tar zxvf libmcrypt 按table键出现版本号

cd libmcrypt按table键

./configure --prefix=/usr/local/libmcrypt

make && make install



cd /usr/local/src/libmcrypt按table键出现版本号  //进入软件源代码目录
========加上=========

cd /usr/local/src/libmcrypt-2.5.8/libltdl

./configure --enable-ltdl-install  //配置ltdl库的安装

make  //编译

make install  //安装



 
安装zlib最新库文件


cd /usr/local/src

tar zxvf zlib 按table键出现版本号

cd zlib  按table键

./configure --prefix=/usr/local/zlib

make && make install



 
安装libpng最新库文件

cd /usr/local/src

tar zxvf libpng 按table键出现版本号

cd libpng 按table键

./configure --prefix=/usr/local/libpng
****************************************************************************************

在./configure --prefix=/usr/local/libpng这步最后会提示：configure: error: ZLib not installed

原因是zlib安装到指定路径，libpng找不到

解决方法如下：

1.进入zlib的源文件目录，执行命令 make clean,清除zlib；

2.重新配置 ./configure,后面不要接--prefix参数（安装不指定路径，默认安装）；

3.make && make install；(zlib)

4.进入libpng目录，执行命令 ./configure --prefix=/usr/local/libpng;

5.make && make install；

6.安装成功.

如果安装成功将会在/usr/local/libpng目录下生成bin,include,lib和share四个目录。

在安装GD2库配置时，通过在configure命令选项中加上“--with-png=/usr/local/libpng”选项，指定libpng库文件的位置。
********************************************************************************

不报错继续执行
make && make install



 
安装jpeg8最新库文件

mkdir /usr/local/jpeg8  //建立jpeg8软件安装目录

mkdir /usr/local/jpeg8/bin //建立存放命令的目录

mkdir /usr/local/jpeg8/lib  //创建jpeg8库文件所在目录

mkdir /usr/local/jpeg8/include //建立存放头文件目录

mkdir -p /usr/local/jpeg8/man/man1 //建立存放手册的目录

cd /usr/local/src

tar zxvf jpeg 按table键出现版本号

cd jpeg-8b 

./configure --prefix=/usr/local/jpeg8/ --enable-shared --enable-static

make && make install





安装freetype最新库文件


cd /usr/local/src/   //进入软件源码包所在目录

tar zxvf freetype-按tab键出现版本号  //解压包到freetype-2.4.9目录 

cd freetype-按tab键出现版本号 //进入目录freetype-2.4.9中

./configure --prefix=/usr/local/freetype //选项--prefix=/usr/local/freetype，是在安装时将软件安装到/usr/local/freetype目录下

make  //对软件源代码文件进行编译

make install //开始安装freetype库文件

如果安装成功将会在/usr/local/freetype目录下存在bin,include,lib和share四个目录。





安装autoconf最新的库文件

cd /usr/local/src

tar zxvf autoconf 按table键出现版本号

cd autoconf 按table键

./configure --prefix=

make && make install




安装最新的GD库文件

cd /usr/local/src

tar zxvf gd 按table键出现版本号

cd gd 按table键

./configure --prefix=/usr/local/gd --with-jpeg=/usr/local/jpeg8/ --with-png=/usr/local/libpng/ --with-freetype=/usr/local/freetype/

make && make install

//错误：检查png安装路径，安装路径中的文件都在

//重新配置编译libpng，--prefix不指定路径

//再重新安装gd2

如果安装成功会在/usr/local/gd/目录下存在bin、include和lib这三个目录。在安装PHP5时，通过在configure命令选项中加上“--with-gd=/usr/local/gd”选项，指定GD库文件的位置。





安装CURL扩展

cd /usr/local/src

tar zxvf curl 按table键出现版本号

cd curl 按table键

./configure --prefix=/usr/local/curl

make && make install


在安装PHP5配置时，在configure命令的选项中加上“--with-zlib-dir=/usr/local/curl”选项，用于指定curl库文件位置。






安装libevent库

cd /usr/local/src

tar zxvf libevent按table键出现版本号

cd libevent按table键

./configure --prefix=/usr/local/libevent

make && make install

在安装memcached配置时，在configure命令的选项中加上“--with-libevent=/usr/local/libevent”选项，用于指定memcached库文件位置。




##################################到此为止php所有扩展安装完成，LAPM环境搭建前的所有工作完成，马上开始mysql的安装，进入真正的lamp搭建########################


安装MySQL数据库系


1、增加用户名和用户组

groupadd mysql

useradd -g mysql mysql

2、进入源码包使用configure 检查并配置安装需要的系统环境，并生成安装配置文件

cd /usr/local/src

tar zxvf mysql按table键出现版本号

cd mysql按table键

./configure --prefix=/usr/local/mysql --with-charset=utf8 --with-extra-charsets=all --enable-thread-safe-client  

3、编译

make && make install	

如果有错：提示ncurses没有安装，先安装ncurses(不需要指定路径)，再配置、编译、安装mysql


4、创建mysql数据库服务器的配置文件

可以使用源码包support-files目录中的my-medium.cnf文件作为模板，将其复制到/etc/目录下，命名为my.cnf文件即可。

cp support-files/my-medium.cnf /etc/my.cnf

必须创建MySQL授权表。进入到安装目录/usr/local/mysql下，执行bin目录下的mysql_install_db脚本，用来初始化MySQL数据库的授权表，其中存储了服务器访问允许。



******************************************************************************************
cd /usr/local/mysql


bin/mysql_install_db --user=mysql  //创建授权表


如果使用root用户运行上面的命令，应当使用--user选项，选项的值应当与你在第一步为运行服务器所创建的登录账户(mysql用户)相同。如果用mysql用户登录来运行上面的命令，可以省略--user选项。


5、用mysql_install_db创建mysql授权表后，需要手动重新启动服务器。

/usr/local/mysql/bin/mysqld_safe --user=mysql &


6、将程序二进制的所有权改为root用户，数据目录的所有权改为运行mysqld程序的mysql用户。如果现在位于安装目录(/usr/local/mysql)下，命令行如下：

chgrp -R mysql .  //将组属性改为mysql组
 
7、在所需要的东西安装完成后，应当使用下面的命令启动MySQL服务了，命令行如下：

/usr/local/mysql/bin/mysqld_safe --user=mysql &

*********************************************************************************************

8、MySQL数据库服务器启动之后，查看一下它的端口3306是否打开，如果看到以下结果表明mysql服务启动成功。命令行如下

netstat -tnl|grep 3306  （通过查看端口确定安装ok）显示下面的内容：

tcp   0    0 0.0.0.0:3306   0.0.0.0:*    LISTEN	./mysql 

9、可以用几种方法为root账户指定密码，我们选择用其中的一种。

在mysql客户端命令行上使用set password指定密码，一定要使用password()函数来加密密码。例如下面设置localhost域的密码为root。其他域可以使用同样的语句，使用的SQL语句如下。

cd /usr/local/mysql/bin

./mysql -u root -p  //登陆进入mysql，因为刚刚安好的mysql管理员没有密码  所以-p后面不写参数


mysql> set password for 'root'@'localhost'=password('root');

Query OK, 0 rows affected (0.03 sec)

10、如果想退出mysql客户端，可以在mysql客户端提示符下输入命令exit或者quit，还可以按键盘ctrl+c组合键，都可以从mysql客户端退出。

因为已经给mysql服务器的root账号设置了密码，所以再次登录mysql客户端就要提供密码才能进入。

退出mysql客户端和重新启动mysql客户端的控制台命令如下。

mysql> exit
Bye
[root@localhost mysql]# bin/mysql -u root -h localhost –proot

11、如果想关闭mysql服务器，在命令行使用mysql服务器的mysqladmin命令，通过-u参数给出mysql数据库管理员用户名root和通过-p参数给出密码，即可关闭mysql服务器。如下示：

bin/mysqladmin -u root -p shutdown

11、设置mysql开机自动运行

mysql服务器和apache服务器一样也有必要设置为开机自动运行，设置方法进入到mysql源代码目录/usr/local/src/mysql-5.0.96,

将子目录support-files下的mysql.server文件复制到/etc/rc.d/init.d目录中，并重命名为mysqld,命令行如下。

cd /usr/local/src/mysql-5.0.96

cp support-files/mysql.server /etc/rc.d/init.d/mysqld

chown root.root /etc/rc.d/init.d/mysqld 

chmod 755 /etc/rc.d/init.d/mysqld 

把mysqld添加到chkconfig中

chkconfig --add mysqld 

在图形和字符集界面下自动启动mysqld

chkconfig --level 3 mysqld on

chkconfig --level 5 mysqld on

再使用chkconfig --list命令检查设置

chkconfig --list mysqld

界面显示：
mysqld   0:off   1:off   2:on    3:on    4:off    5:on    6:off



############################################################################到此为止，mysql安装完成，接下来进行apache安装###################################################

安装新版本的apache服务器

1、卸载apr、apr-util

yum remove apr apr-util 

下载安装：http://apr.apache.org/download.cgi

cd /usr/local/src

tar zxvf apr-1.4.6.tar.gz

cd apr-1.4.6

./configure --prefix=/usr/local/apr-httpd/ && make && make install 


下载安装：http://apr.apache.org/download.cgi

cd /usr/local/src

tar zxvf apr-util-1.4.1.tar.gz

cd apr-util-1.4.1

./configure --prefix=/usr/local/apr-util-httpd/ --with-apr=/usr/local/apr-httpd/ && make && make install


下载安装：http://sourceforge.net/projects/pcre

cd /usr/local/src

unzip -o pcre-8.10.zip

cd pcre-8.10

./configure --prefix=/usr/local/pcre

make

make install


//安装apache2.2时配置报错

cd /usr/local/src

tar zxvf httpd-2.2按table

cd httpd-2.2按table

 ./configure

注意：./configure 的时候如果报错，报错如下

checking for void pointer length... yes configure: error: Size of "void *" is less than size of "long"

解决方法vi configure 

if test "$ap_cv_void_ptr_lt_long" = "yes"; then

    as_fn_error $? "Size of \"void *\" is less than size of \"long\"""$LINENO" 5

改为if test "$ap_cv_void_ptr_lt_long" != "yes"; then

    as_fn_error $? "Size of \"void *\" is less than size of \"long\"""$LINENO" 5

保存重新编译

./configure --prefix=/usr/local/apache2.2/ --with-apr=/usr/local/apr-httpd/ --with-apr-util=/usr/local/apr-util-httpd/ --with-pcre=/usr/local/pcre/

[root@localhost httpd-2.4.2]# ./configure \
> --prefix=/usr/local/apache2.4 \
> --with-apr=/usr/local/apr-httpd/ 
>--with-apr-util=/usr/local/apr-util-httpd/ 
>--with-pcre=/usr/local/pcre/


make && make install

安装完成后，进入/usr/local/apache2/目录下，检查是否有以下文件：

bin  build  cgi-bin  error  htdocs  icons  include  logs  man  manual  modules

启动Apache服务器，并查端口是否开启，启动Apache服务器的命令行如下：

#/usr/local/apache2/bin/apachectl start

查看端口命令行如下：

#netstat -tnl|grep 80
tcp        0      0 0.0.0.0:80            0.0.0.0:*                   LIST

测试安装结果，打开浏览器，在地址栏中输入URL为：http://172.19.203.10

如果浏览器中出现It works!则表明Apache服务器可以使用。

每种服务器软件都有必要制成开机时自动启动，Apache服务器开机自动启动，只要在“/etc/rc.d/rc.local”文件，加上Apache服务器的启动命令即可。可以直接打开“/etc/rc.d/rc.local”文件，在最后一行写入Apache启动命令，也可以用echo命令追加进去，如下命令行示：

[root@localhost apache242]# echo "/usr/local/apache2.2/bin/apachectl start">> /etc/rc.d/rc.local

注意：

由于安装的过程中没有指定apache配置文件的路径，默认配置文件httpd.conf在/etc/httpd/conf/目录中





刚安装完成apache后无法使用service httpd restart、stop、start

需要这样：

cp /usr/local/apache2/bin/apachectl /etc/rc.d/init.d/httpd


编辑/etc/rc.d/init.d/httpd,在文件最前面插入下面的行，使其支持chkconfig命令：

vi /etc/rc.d/init.d/httpd
   
   # chkconfig: 2345 85 15
   # description: Apache is a World Wide Web server.

ln -s /etc/rc.d/init.d/httpd /etc/rc.d/rc5.d/S85httpd      //建立链接(85的意义后面介绍)


chkconfig --add httpd

检查apache服务是否生效：

chkconfig --list httpd

此时Apache就可以自动启动了。


开启apache：service httpd start
关闭apache：service httpd stop
重启apache：service httpd restart


完美安装完成！！！！！！！！！！！！！





安装PHP5.4  进入php-5.4.15源码包编译

cd /usr/local/src

tar zxvf php-5 按table

cd php-5.4 按table

[root@localhost php-5.4.15]# ./configure \
--prefix=/usr/local/php5.4 \
--with-config-file-path=/usr/local/php5.4/etc \
--with-apxs2=/usr/local/apache2/bin/apxs \
--with-mysql=/usr/local/mysql/ \
--with-libxml-dir=/usr/local/libxm12/ \
--with-png-dir=/usr/local/libpng/ \
--with-jpeg-dir=/usr/local/jpeg8/ \
--with-freetype-dir=/usr/local/freetype/ \
--with-gd=/usr/local/gd/ \
--with-zlib-dir=/usr/local/zlib/ \
--with-mcrypt=/usr/local/libmcrypt/ \
--with-mysqli=/usr/local/mysql/bin/mysql_config \
--with-curl=/usr/local/curl \
--enable-soap \
--enable-mbstring=all \
--enable-sockets

make 

make install


报出错误：make: *** [ext/gd/gd.lo] 错误 1


解决方法：

vi /usr/local/gd/include/gd_io.h //编辑GD库文件

gdIOCtx结构中增加	void （*data）;

格式如下：

typedef struct gdIOCtx
{
  int (*getC) (struct gdIOCtx *);
  int (*getBuf) (struct gdIOCtx *, void *, int);
 
  void (*putC) (struct gdIOCtx *, int);
  int (*putBuf) (struct gdIOCtx *, const void *, int);
 
  /* seek must return 1 on SUCCESS, 0 on FAILURE. Unlike fseek! */
  int (*seek) (struct gdIOCtx *, const int);
 
  long (*tell) (struct gdIOCtx *);
 
  void (*gd_free) (struct gdIOCtx *);
  void (*data);
}
gdIOCtx;




安装完成后，需要建立PHP配置文件。


在使用configure命令安装配置时使用“--with-config-file-path=/usr/local/php5.4/etc/”选项，指定了配置文件的位置。

将源码包下面的php.ini-development文件复制到/usr/local/php5.4/etc/中，并改名为php.ini作为PHP的配置文件，如下示:


[root@localhost php-5.4.15]# cp php.ini-development /usr/local/php5.4/etc/php.ini


 
整合Apache与PHP，上面编译之前，我们使用configure命令安装配置时，

使用--with-apxs2=/usr/local/apache2.4/bin/apxs选项以使Apache 2.4将PHP作为功能模块使用。

但我们还要修改Apahce配置文件，添加PHP的支持，告诉Apache将哪些后缀作为PHP解析。

例如，让Apache把.php或.phtml后缀名解析为PHP.

使用vi打开Apache的配置文件/etc/httpd/conf/httpd.conf，若果找不到的话，就使用这个路径：


cd /usr/local/apache2/conf  

再用 vi httpd.conf就可以了

找到AddType application/x-gzip .gz .tgz指令选项，并在其下方添加一条指令

AddType application/x-httpd-php .php .phtml

也可以将任何后缀的文件解析为PHP，只要在添加的语句中加入并用空格分开，这里以多添加一个.phtml来示例
如下示:
# If the AddEncoding directives above are commented-out, then you
# probably should define those extensions to indicate media types:
#
AddType application/x-compress .Z
AddType application/x-gzip .gz .tgz
AddType application/x-httpd-php .php .phtml


修改完成后必须重启Apache服务器，才能重新加载配置文件使修改生效。
[root@localhost php-5.4.15]#/usr/local/apache2/bin/apachectl stop
[root@localhost php-5.4.15]#/usr/local/apache2/bin/apachectl start

如果apachectl重启不成功，关闭SELinux

如果出现错误：httpd: Syntax error on line 54 of /usr/local/apache2.2/conf/httpd.conf: Cannot load /usr/local/apache2.2/modules/libphp5.so into server: libltdl.so.3: cannot open shared object file: No such file or directory
解决方案：
[root@localhost bin]#echo "/usr/local/lib">>/etc/ld.so.conf
[root@localhost bin]#ldconfig

重新启动Apache
[root@localhost php-5.4.15]#/usr/local/apache2.4/bin/apachectl stop
[root@localhost php-5.4.15]#/usr/local/apache2.4/bin/apachectl start



测试PHP环境是否可以正常运行，在/usr/local/apache2.4/htdocs目录下建一个test.php或test.phtml的文件，内容如下示:
<?php
phpinfo();
?>
打开浏览器，在地址栏输入http://172.19.203.10/test.php来运行该文件，如果出现下图内容，说明LAMP环境安装成功。

———————————————————————————————————————————————————————

如果apache报错：
httpd: Could not reliably determine the server's fully qualified domain name, using 127.0.0.1 for ServerName

解决办法非常简单：

#vim /web/apache/conf/httpd.conf (在这里/web/apahce是我安装apache的目录，你默认安装的话应该是/usr/local/apache2/icons)

找到#ServerName www.example.com:80   把#去掉，再重启apache即可没事了。
——————————————————————————————————————————————————————


到此为止，不要再装了！下面是memcache服务器，需要的话再装！







































安装memcache服务器
安装方法大致与freetype相同。唯一注意的地方是configure时的路径
./configure \
--prefix=/usr/local/memcached
--with-libevent=/usr/local/libevent(memcache需要libevent库)

出错：configure: error: libevent is required.
解决办法：libevent库，不指定路径（不设置--prefix）再配置、编译、安装一次，注意make clean

安装后启动memcache：
/usr/local/memcached/bin/memcached –d start

报错：./memcached: error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or directory表示memcached 找不到libevent 的位置

所以，请先使用whereis libevent 得到位置，然后连接到memcached 所寻找的路径
首先查看，libevent 在哪里
# whereis libevent
libevent: /usr/local/lib/libevent.la /usr/local/lib/libevent.so /usr/local/lib/libevent.a
然后，再看memcached 从哪里找它，查找的命令如下：
# LD_DEBUG=libs memcached -v 2>&1 > /dev/null | less

可以看到：是trying file=/usr/lib/libevent-2.0.so.5，所以，创建软链
[root@localhost tools]# ln -s /usr/local/libevent/lib/libevent-2.0.so.5 /usr/lib/libevent-2.0.so.5
再次启动:
#./memcached -d start -u root //以root用户启动


安装php的memcache扩展

从源码安装
# tar zxf memcache-3.0.8.tgz 
# cd memcache-3.0.8
# /usr/local/servers/php5/bin/phpize
#./configure --enable-memcache
--with-php-config=/usr/local/php5.4/bin/php-config（3.0.8版本没错,2.2.5版本有错）
# make && make install

安装完后会有类似这样的提示：
Installing shared extensions: 
/usr/local/php5.4/lib/php/extensions/no-debug-zts-20100525/

把这个记住，然后修改php.ini，把
extension_dir = "./"
修改为
extension_dir = "/usr/local/php5.4/lib/php/extensions/no-debug-zts-20100525"
并添加一行
extension="memcache.so"


安装PDO_MYSQL扩展
解压源码  tar -xzvf  PDO_MYSQL-1.0.2.tgz
PDO_MYSQL源码下载地址：http://pecl.php.net/package/PDO_MYSQL
执行以下操作 :
#cd /usr/local/src/PDO_MYSQL-1.0.2(进入源码包)
#/usr/local/php5.4/bin/phpize (/usr/local/php/是php的安装目录,生成配置命令)
#./configure 
>--with-php-config=/usr/local/php5.4/bin/php-config 
>--with-pdo-mysql=/usr/local/mysql	(/usr/local/mysql为mysql的安装目录)
再执行以下命令
make
出现以下错误，错误提示如下：
In file included from /root/PDO_MYSQL-1.0.2/pdo_mysql.c:31:
/root/PDO_MYSQL-1.0.2/php_pdo_mysql_int.h:25:19: error: mysql.h: No such file or directory
In file included from /root/PDO_MYSQL-1.0.2/pdo_mysql.c:31:
/root/PDO_MYSQL-1.0.2/php_pdo_mysql_int.h:36: error: expected specifier-qualifier-list before ‘MYSQL’
/root/PDO_MYSQL-1.0.2/php_pdo_mysql_int.h:48: error: expected specifier-qualifier-list before ‘MYSQL_FIELD’
/root/PDO_MYSQL-1.0.2/php_pdo_mysql_int.h:53: error: expected specifier-qualifier-list before ‘MYSQL_RES’
make: *** [pdo_mysql.lo] Error 1
解决办法:
这是因为在编译时需要mysql的头文件，而默认搜索路径找不到头文件的位置，所以才出现这个问题，所以要将 /usr/local/mysql/include/mysql/ 目录下的mysql头文件链接到 /usr/local/include/ 的目录下：
#ln -s /usr/local/mysql/include/mysql/* /usr/local/include/
#make install
执行完后会提示以下，说明成功：
Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20100525/
最后在php.ini添加以下一句：
extension=pdo_mysql.so
重启apache，安装成功

phpMyAdmin的安装
1、进入软件源码所在的目录/usr/local/src/中，并解压软件包phpMyAdmin-3.5.1-all-languages.tar.gz到当前目录phpMyAdmin-3.5.1-all-languages下。
2、把解压的目录phpMyAdmin-3.5.1-all-languages下的文件，全部复制到Apache的/usr/local/apache2.4/htdocs下，并新建一个名为phpmyadmin的目录下面，即安装完成。
[root@localhost src]# cp -R phpMyAdmin-3.5.1-all-language /usr/local/apache2.4/htdocs/phpmyadmin
3、在使用phpmyadmin之前，也需要先配置一下。配置的方法是通过对phpmyadmin顶层目录下的config.inc.php文件中的几个选项做一些设置即可。默认不存在config.inc.php文件，我们需要手工创建一个，也可以复制config.sample.inc.php模板得到最低限度的配置文件。
[root@localhost src]# cd /usr/local/apache2.4/htdocs/phpmyadmin/
[root@localhost phpmyadmin]# cp config.sample.inc.php config.inc.php
 
phpMyAdmin的配置
    我们通过身份验证模式的要求，可以有两种配置方案，一种是http和cookie身份验证模式。在这两种模式下，用户必须先在一个登录窗口里输入MySQL数据库的有效用户名和密码，才能使用phpMyAdmin程序。这种做法有两个明显的好处；首先，因为MySQL数据库的密码没有出现在config.inc.php文件里，所以身份验证过程更加安全；其次，允许以不同的用户身份登录对自己的数据库进行管理。这两种身份验证模式尤其适合数据库中多个用户账号的情况。
第二种方案是，config身份验证模式。这种情况下，密码以明文形式保存在config.inc.php文件里。只需要把MySQL用户名和密码直接写入到config.inc.php文件即可。这样，在登录phpMyAdmin时就不会提示输入用户名和密码了，而只直接用config.inc.php文件里写入的用户登录 。如果只是在一个本地测试系统上使用phpMyAdmin,可以使用这种模式。

1、http身份验证模式
如果想让phpMyAdmin使用HTTP身份验证模式，首先需要在config.inc.php文件做如下修改：

当完成设置之后，我们启动phpMyAdmin时，屏幕上将弹出一个WEB浏览器对话框，需要在这个对话框里输入MySQL用户名和密码，才能进入phpMyAdmin操作界面。如下图示，在windows客户端用IE浏览器，访问WEB服务器的phpMyAdmin目录下的index.php文件，即可启动phpMyAdmin.
 



2、cookie身份验证模式
    cookie身份验证模式是HTTP身份验证模式的补充，不能使用HTTP身份验证模式的场合都可以使用它。cookie身份验证模式要求用户必须允许来自phpMyAdmin的cookie进入自己的计算机。即用户需要在浏览器中开启客户端的cookie功能。
   如果想让phpMyAdmin使用cookie身份验证模式，除了必须修改config.inc.php文件里的auth_type语句外，还必须向blowfish_secret参数提供一个字符串。这个字符串可以是任意的，目的是在把登录时使用的用户和密码存储在客户端电脑上的cookie之前，系统将会使用这个字符串对它们进行加密码。在config.inc.php中修改的内容如下图示：
 :wq

和上面启动phpMyAdmin的方式一样，我们在windows客户端使用IE浏览器，访问web服务器上的phpMyAdmin目录下的index.php文件，需要提供MySQL的用户名和密码才能登录，如下图示：
 

3、config身份验证模式
如果想让phpMyAdmin使用config身份验证模式，首先需要在config.inc.php文件里做出如下所示的修改。把MySQL数据库的用户名和密码以明文的方式写入，具体修改内容如下图示:
 

和上面启动phpMyAdmin的方式一样，我们在windows客户端使用IE浏览器，访问WEB服务器上的phpMyAdmin目录下的index.php文件。但不用提供MySQL的用户名和密码就可以登录，它是使用config.inc.php中以明文方式写入的用户名和密码登录的。这里不在截图。
到这里LAMP就安装完成了！



[jekyll-docs]: http://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
